'''
Created on Sep 25, 2017

@author: anand
'''
import csv
from itertools import chain

from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelBinarizer
import pycrfsuite

def get_model_input(fileName):
    
    prepared_input = []
    try:
        with open(fileName,'rb') as f:
            readerObj = csv.reader(f)
            for fileRow in readerObj:
                row = []
                for tpl in fileRow:
                    if tpl == '': continue
                    tpl = tuple( tpl.split(','))
                    row.append(tpl)
                prepared_input.append(row)    
    except IOError as e:
        fileList = fileName.split('.')
        rindex = fileList[0].rfind('_')
        print 'Please verify file generated by 1_create_csv.py : '+ ''.join(fileList[0][:rindex])+'.csv'+\
               '\nSave after any edits as : ' + fileName +\
               '\nThen rerun this script'
        exit()  
    return prepared_input    

#######################################################
def generate_Features(word_tuple, i):
    word = word_tuple[i][0]
    nltk_pos_tag = word_tuple[i][1]
    features = [
        'word.lower=' + word.lower(),
        'word.isdigit=%s' % word.isdigit(),
        'nltk_pos_tag=' + nltk_pos_tag,
    ]
    if i > 0:
        word1 = word_tuple[i-1][0]
        nltk_pos_tag1 = word_tuple[i-1][1]
        features.extend([
            '-1:word.lower=' + word1.lower(),
            '-1:nltk_pos_tag=' + nltk_pos_tag1,
        ])
    else:
        features.append('BOS')
                
    return features


def word_tuple2features(word_tuple):
    return [generate_Features(word_tuple, i) for i in range(len(word_tuple))]

def word_tuple2labels(word_tuple):
    return [label for token, nltk_pos_tag, label in word_tuple]

def word_tuple2tokens(word_tuple):
    return [token for token, nltk_pos_tag, label in word_tuple]

#######################################################

train_word_tuples = get_model_input('labelled_train_verified.csv')
test_word_tuples  = get_model_input('labelled_test_verified.csv')
#print word_tuple2features(train_word_tuples[0])[0]

X_train = [word_tuple2features(s) for s in train_word_tuples ]
y_train = [word_tuple2labels(s) for s in train_word_tuples]

#In 7
X_train = [word_tuple2features(s) for s in train_word_tuples]
y_train = [word_tuple2labels(s) for s in train_word_tuples]
X_test = [word_tuple2features(s) for s in test_word_tuples]
y_test = [word_tuple2labels(s) for s in test_word_tuples]

#In 8
trainer = pycrfsuite.Trainer(verbose=False)

for xseq, yseq in zip(X_train, y_train): trainer.append(xseq, yseq)

#In 9
trainer.set_params({ 'c1': 1.0, 'c2': 1e-3,'max_iterations': 50,'feature.possible_transitions': True })

#In 11
trainer.train('anand_crf_model_file')

#In 13 - Make predictions
tagger = pycrfsuite.Tagger()
tagger.open('anand_crf_model_file')

#In 15

def rate_classification_report(y_true, y_pred):

    lb = LabelBinarizer()
    y_true_combined = lb.fit_transform(list(chain.from_iterable(y_true)))
    y_pred_combined = lb.transform(list(chain.from_iterable(y_pred)))
        
    tagset = set(lb.classes_)# - {'irrelevant'}                          # keeping irrelevant tag
    tagset = sorted(tagset, key=lambda tag: tag.split('-', 1)[::-1])
    class_indices = {cls: idx for idx, cls in enumerate(lb.classes_)}
    
    return classification_report(
        y_true_combined,
        y_pred_combined,
        labels = [class_indices[cls] for cls in tagset],
        target_names = tagset,
    )
#In 16

y_pred = [tagger.tag(xseq) for xseq in X_test]

#In 17
print rate_classification_report(y_test, y_pred)
